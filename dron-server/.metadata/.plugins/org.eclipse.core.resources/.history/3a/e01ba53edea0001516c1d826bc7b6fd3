package pl.mkapiczynski.dron.serverEndpoint;

import java.io.IOException;
import java.io.StringWriter;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

import javax.json.Json;
import javax.json.JsonArrayBuilder;
import javax.json.JsonObject;
import javax.json.JsonWriter;
import javax.websocket.EncodeException;
import javax.websocket.OnClose;
import javax.websocket.OnError;
import javax.websocket.OnMessage;
import javax.websocket.OnOpen;
import javax.websocket.Session;

@javax.websocket.server.ServerEndpoint(value = "/chatroom", encoders = { MessageEncoder.class }, decoders = {
		MessageDecoder.class })
public class ChatroomServerEndpoint {
	public static Set<Session> chatroomUsers = Collections.synchronizedSet(new HashSet<Session>());

	@OnOpen
	public void handleOpen(Session userSession) throws IOException {
		chatroomUsers.add(userSession);
		Iterator<Session> iterator = chatroomUsers.iterator();
		while (iterator.hasNext()) {
			iterator.next().getBasicRemote().sendObject(new UsersMessage(getIds()));
		}
	}

	@OnMessage
	public void handleMessage(Message incomingMessage, Session userSession) throws IOException, EncodeException {
		if (incomingMessage instanceof ChatMessage) {
			ChatMessage chatMessage = (ChatMessage) incomingMessage;
			ChatMessage outgoingChatMessage = new ChatMessage();
			Iterator<Session> iterator = chatroomUsers.iterator();
			String username = (String) userSession.getUserProperties().get("username");
			
			if (username == null) {
				userSession.getUserProperties().put("username", chatMessage.getMessage());
				outgoingChatMessage.setName("System");
				outgoingChatMessage.setMessage("You are now connected as " + chatMessage.getMessage());
				userSession.getBasicRemote().sendObject(outgoingChatMessage);
				while (iterator.hasNext()) {
					iterator.next().getBasicRemote().sendObject(new UsersMessage(getIds()));
				}			
			} else {
				outgoingChatMessage.setName(username);
				outgoingChatMessage.setMessage(chatMessage.getMessage());
				
			}
		} 

	}

	@OnClose
	public void handleClose(Session userSession) throws IOException, EncodeException {
		chatroomUsers.remove(userSession);
		Iterator<Session> iterator = chatroomUsers.iterator();
		while (iterator.hasNext()) {
			iterator.next().getBasicRemote().sendObject(new UsersMessage(getIds()));
		}
	}

	@OnError
	public void handleError(Throwable t) {

	}
	
	private static Set<String> getIds(){
		HashSet<String> resultSet = new HashSet<>();
		Iterator<Session> iterator = chatroomUsers.iterator();
		while(iterator.hasNext()){
			resultSet.add(iterator.next().getUserProperties().get("username").toString());
		}
		return resultSet;
	}

	

}

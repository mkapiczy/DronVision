package pl.mkapiczynski.dron.decoder;

import java.io.StringReader;

import javax.json.Json;
import javax.websocket.DecodeException;
import javax.websocket.Decoder;
import javax.websocket.EndpointConfig;

import pl.mkapiczynski.dron.message.GeoDataMessage;

public class GeoMessageDecoder implements Decoder.Text<GeoDataMessage>{

	@Override
	public void init(EndpointConfig config) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void destroy() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public GeoDataMessage decode (String jsonMessage) throws DecodeException {
		GeoDataMessage geoMessage = new GeoDataMessage();
		geoMessage.setDeviceId((Json.createReader(new StringReader(jsonMessage)).readObject().getString("deviceId")));
		geoMessage.setDeviceId((Json.createReader(new StringReader(jsonMessage)).readObject().getString("timestamp")));
		geoMessage.setDeviceId((Json.createReader(new StringReader(jsonMessage)).readObject().getString("latitude")));
		geoMessage.setDeviceId((Json.createReader(new StringReader(jsonMessage)).readObject().getString("longitude")));
		geoMessage.setDeviceId((Json.createReader(new StringReader(jsonMessage)).readObject().getString("altitude")));
		return geoMessage;
	}

	@Override
	public boolean willDecode(String jsonMessage) {
		try {
			Json.createReader(new StringReader(jsonMessage)).readObject();
		} catch (Exception e) {
			return false;
		}
		return true;
	}

}



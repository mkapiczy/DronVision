package pl.mkapiczynski.dron.serverEndpoint;

import java.io.IOException;
import java.io.StringWriter;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

import javax.json.Json;
import javax.json.JsonArrayBuilder;
import javax.json.JsonObject;
import javax.json.JsonWriter;
import javax.websocket.EncodeException;
import javax.websocket.OnClose;
import javax.websocket.OnError;
import javax.websocket.OnMessage;
import javax.websocket.OnOpen;
import javax.websocket.Session;

@javax.websocket.server.ServerEndpoint(value = "/chatroom", encoders = { ChatMessageEncoder.class }, decoders = {
		ChatMessageDecoder.class })
public class ChatroomServerEndpoint {
	public static Set<Session> chatroomUsers = Collections.synchronizedSet(new HashSet<Session>());

	@OnOpen
	public void handleOpen(Session userSession) throws IOException{
		chatroomUsers.add(userSession);
		Iterator<Session> iterator = chatroomUsers.iterator();
		while(iterator.hasNext()){
			iterator.next().getBasicRemote().sendText(buildJsoUsersData());
		}
	}

	@OnMessage
	public void handleMessage(ChatMessage incomingMessage, Session userSession) throws IOException, EncodeException {
		String username = (String) userSession.getUserProperties().get("username");
		Iterator<Session> iterator = chatroomUsers.iterator();
		ChatMessage outgoingChatMessage = new ChatMessage();
		if (username == null) {
			userSession.getUserProperties().put("username", incomingMessage.getMessage());
			outgoingChatMessage.setName("System");
			outgoingChatMessage.setMessage("You are now connected as " + incomingMessage.getMessage());
			userSession.getBasicRemote().sendObject(outgoingChatMessage);
			while(iterator.hasNext()){
				iterator.next().getBasicRemote().sendText(buildJsoUsersData());
			}
		} else {
			outgoingChatMessage.setName(username);
			outgoingChatMessage.setMessage(incomingMessage.getMessage());
			while (iterator.hasNext()) {
				iterator.next().getBasicRemote().sendObject(outgoingChatMessage);
			}
		}

	}

	@OnClose
	public void handleClose(Session userSession) throws IOException{
		chatroomUsers.remove(userSession);
		Iterator<Session> iterator = chatroomUsers.iterator();
		while(iterator.hasNext()){
			iterator.next().getBasicRemote().sendText(buildJsoUsersData());
		}
	}

	@OnError
	public void handleError(Throwable t) {

	}
	
	private String buildJsoUsersData() {
		Iterator<String> iterator = getUsersNames().iterator();
		JsonArrayBuilder jsonArrayBuilder = Json.createArrayBuilder();
		while(iterator.hasNext()){
			jsonArrayBuilder.add(iterator.next());
		}
		return Json.createObjectBuilder().add("users", jsonArrayBuilder).build().toString();
	}

	private String buildJsonMessageData(String username, String message) {
		JsonObject jsonObject = Json.createObjectBuilder().add("message", username + " : " + message).build();
		StringWriter stringWriter = new StringWriter();
		try (JsonWriter jsonWriter = Json.createWriter(stringWriter)) {
			jsonWriter.write(jsonObject);
		}
		return stringWriter.toString();
	}

	private Set<String> getUsersNames() {
		HashSet<String> resultSet = new HashSet<>();
		Iterator<Session> iterator = chatroomUsers.iterator();
		while (iterator.hasNext()) {
			resultSet.add(iterator.next().getUserProperties().get("username").toString());
		}
		return resultSet;
	}

}

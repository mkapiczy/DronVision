package pl.mkapiczynski.dron.server;

import java.io.IOException;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

import javax.websocket.OnClose;
import javax.websocket.OnError;
import javax.websocket.OnMessage;
import javax.websocket.OnOpen;
import javax.websocket.Session;

@javax.websocket.server.ServerEndpoint("/chatroom")
public class ChatroomServerEndpoint {
	public static Set<Session> chatroomUsers = Collections.synchronizedSet(new HashSet<Session>());

	@OnOpen
	public void handleOpen(Session userSession) {
		chatroomUsers.add(userSession);
	}

	@OnMessage
	public void handleMessage(String message, Session userSession) throws IOException {
		String username = (String) userSession.getUserProperties().get("username");
		if (username == null) {
			userSession.getUserProperties().put("username", message);
			userSession.getBasicRemote().sendText(buildJsonData("System", "you are now connected as " + message));
		} else {
			Iterator<Session> iterator = chatroomUsers.iterator();
			while (iterator.hasNext()) {
				iterator.next().getBasicRemote().sendText(buildJsonData(username, message));
			}
		}

	}

	@OnClose
	public void handleClose(Session userSession) {
		chatroomUsers.remove(userSession);
	}

	@OnError
	public void handleError(Throwable t) {

	}

	private String buildJsonData(String username, String message) {
		return null;
	}

}
